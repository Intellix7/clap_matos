/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from "@payloadcms/db-sqlite";
import {
  sqliteTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  text,
  numeric,
} from "@payloadcms/db-sqlite/drizzle/sqlite-core";
import { sql, relations } from "@payloadcms/db-sqlite/drizzle";

export const users = sqliteTable(
  "users",
  {
    id: integer("id").primaryKey(),
    role: text("role", { enum: ["admin", "user"] })
      .notNull()
      .default("user"),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    email: text("email").notNull(),
    resetPasswordToken: text("reset_password_token"),
    resetPasswordExpiration: text("reset_password_expiration").default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    salt: text("salt"),
    hash: text("hash"),
    _verified: integer("_verified", { mode: "boolean" }),
    _verificationToken: text("_verificationtoken"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: text("lock_until").default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
  },
  (columns) => ({
    users_updated_at_idx: index("users_updated_at_idx").on(columns.updatedAt),
    users_created_at_idx: index("users_created_at_idx").on(columns.createdAt),
    users_email_idx: uniqueIndex("users_email_idx").on(columns.email),
  }),
);

export const jeux = sqliteTable(
  "jeux",
  {
    id: integer("id").primaryKey(),
    name: text("name").notNull(),
    categorie: integer("categorie_id")
      .notNull()
      .references(() => categories_jeux.id, {
        onDelete: "set null",
      }),
    aquisitionDate: text("aquisition_date").default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    borrowed: integer("borrowed", { mode: "boolean" }).default(false),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    jeux_categorie_idx: index("jeux_categorie_idx").on(columns.categorie),
    jeux_updated_at_idx: index("jeux_updated_at_idx").on(columns.updatedAt),
    jeux_created_at_idx: index("jeux_created_at_idx").on(columns.createdAt),
  }),
);

export const categories_jeux = sqliteTable(
  "categories_jeux",
  {
    id: integer("id").primaryKey(),
    name: text("name").notNull(),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    categories_jeux_updated_at_idx: index("categories_jeux_updated_at_idx").on(
      columns.updatedAt,
    ),
    categories_jeux_created_at_idx: index("categories_jeux_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const emprunts = sqliteTable(
  "emprunts",
  {
    id: integer("id").primaryKey(),
    game: integer("game_id")
      .notNull()
      .references(() => jeux.id, {
        onDelete: "set null",
      }),
    borrower: text("borrower").notNull(),
    dateRetour: text("date_retour")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    emprunts_game_idx: index("emprunts_game_idx").on(columns.game),
    emprunts_updated_at_idx: index("emprunts_updated_at_idx").on(
      columns.updatedAt,
    ),
    emprunts_created_at_idx: index("emprunts_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const payload_locked_documents = sqliteTable(
  "payload_locked_documents",
  {
    id: integer("id").primaryKey(),
    globalSlug: text("global_slug"),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index(
      "payload_locked_documents_global_slug_idx",
    ).on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index(
      "payload_locked_documents_updated_at_idx",
    ).on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index(
      "payload_locked_documents_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_locked_documents_rels = sqliteTable(
  "payload_locked_documents_rels",
  {
    id: integer("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: text("path").notNull(),
    usersID: integer("users_id"),
    jeuxID: integer("jeux_id"),
    categoriesJeuxID: integer("categories_jeux_id"),
    empruntsID: integer("emprunts_id"),
  },
  (columns) => ({
    order: index("payload_locked_documents_rels_order_idx").on(columns.order),
    parentIdx: index("payload_locked_documents_rels_parent_idx").on(
      columns.parent,
    ),
    pathIdx: index("payload_locked_documents_rels_path_idx").on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      "payload_locked_documents_rels_users_id_idx",
    ).on(columns.usersID),
    payload_locked_documents_rels_jeux_id_idx: index(
      "payload_locked_documents_rels_jeux_id_idx",
    ).on(columns.jeuxID),
    payload_locked_documents_rels_categories_jeux_id_idx: index(
      "payload_locked_documents_rels_categories_jeux_id_idx",
    ).on(columns.categoriesJeuxID),
    payload_locked_documents_rels_emprunts_id_idx: index(
      "payload_locked_documents_rels_emprunts_id_idx",
    ).on(columns.empruntsID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_locked_documents_rels_users_fk",
    }).onDelete("cascade"),
    jeuxIdFk: foreignKey({
      columns: [columns["jeuxID"]],
      foreignColumns: [jeux.id],
      name: "payload_locked_documents_rels_jeux_fk",
    }).onDelete("cascade"),
    categoriesJeuxIdFk: foreignKey({
      columns: [columns["categoriesJeuxID"]],
      foreignColumns: [categories_jeux.id],
      name: "payload_locked_documents_rels_categories_jeux_fk",
    }).onDelete("cascade"),
    empruntsIdFk: foreignKey({
      columns: [columns["empruntsID"]],
      foreignColumns: [emprunts.id],
      name: "payload_locked_documents_rels_emprunts_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_preferences = sqliteTable(
  "payload_preferences",
  {
    id: integer("id").primaryKey(),
    key: text("key"),
    value: text("value", { mode: "json" }),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_preferences_key_idx: index("payload_preferences_key_idx").on(
      columns.key,
    ),
    payload_preferences_updated_at_idx: index(
      "payload_preferences_updated_at_idx",
    ).on(columns.updatedAt),
    payload_preferences_created_at_idx: index(
      "payload_preferences_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_preferences_rels = sqliteTable(
  "payload_preferences_rels",
  {
    id: integer("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: text("path").notNull(),
    usersID: integer("users_id"),
  },
  (columns) => ({
    order: index("payload_preferences_rels_order_idx").on(columns.order),
    parentIdx: index("payload_preferences_rels_parent_idx").on(columns.parent),
    pathIdx: index("payload_preferences_rels_path_idx").on(columns.path),
    payload_preferences_rels_users_id_idx: index(
      "payload_preferences_rels_users_id_idx",
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_preferences_rels_users_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_migrations = sqliteTable(
  "payload_migrations",
  {
    id: integer("id").primaryKey(),
    name: text("name"),
    batch: numeric("batch"),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index(
      "payload_migrations_updated_at_idx",
    ).on(columns.updatedAt),
    payload_migrations_created_at_idx: index(
      "payload_migrations_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const relations_users = relations(users, () => ({}));
export const relations_jeux = relations(jeux, ({ one }) => ({
  categorie: one(categories_jeux, {
    fields: [jeux.categorie],
    references: [categories_jeux.id],
    relationName: "categorie",
  }),
}));
export const relations_categories_jeux = relations(categories_jeux, () => ({}));
export const relations_emprunts = relations(emprunts, ({ one }) => ({
  game: one(jeux, {
    fields: [emprunts.game],
    references: [jeux.id],
    relationName: "game",
  }),
}));
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
    jeuxID: one(jeux, {
      fields: [payload_locked_documents_rels.jeuxID],
      references: [jeux.id],
      relationName: "jeux",
    }),
    categoriesJeuxID: one(categories_jeux, {
      fields: [payload_locked_documents_rels.categoriesJeuxID],
      references: [categories_jeux.id],
      relationName: "categoriesJeux",
    }),
    empruntsID: one(emprunts, {
      fields: [payload_locked_documents_rels.empruntsID],
      references: [emprunts.id],
      relationName: "emprunts",
    }),
  }),
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  }),
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({}),
);

type DatabaseSchema = {
  users: typeof users;
  jeux: typeof jeux;
  categories_jeux: typeof categories_jeux;
  emprunts: typeof emprunts;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  relations_users: typeof relations_users;
  relations_jeux: typeof relations_jeux;
  relations_categories_jeux: typeof relations_categories_jeux;
  relations_emprunts: typeof relations_emprunts;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
};

declare module "@payloadcms/db-sqlite" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
